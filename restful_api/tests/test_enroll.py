from flask import url_for
import time


def test_get_single_enrollment(
    client,
    db,
    enroll_factory,
    engineer_employee_headers
):
    """Test GET request for single enrollment"""
    # 404 Test
    enrollment_url = url_for("api.enrollment", eng_id=1, course_id=1, trainer_id=1)
    # /api/v1/enroll/?eng_id=1&course_id=1&trainer_id=1
    rep = client.get(enrollment_url, headers=engineer_employee_headers)
    assert rep.status_code == 404, "Backend not catching invalid params provided for single enrollment GET"

    # 200 Test
    # Creating mock data
    enrollments = enroll_factory.create_batch(1)
    db.session.add_all(enrollments)
    db.session.commit()

    enrollment_url = url_for(
        "api.enrollment",
        eng_id=enrollments[0].eng_id,
        course_id=enrollments[0].course_id,
        trainer_id=enrollments[0].trainer_id
    )
    rep = client.get(enrollment_url, headers=engineer_employee_headers)
    assert rep.status_code == 200, "Engineer enrollment endpoint not up"
    assert rep.get_json()["enrollment"]["eng_id"] == enrollments[0].eng_id, "Incorrect engineer id retrieved by Enroll"
    assert rep.get_json()["enrollment"]["course_id"] == enrollments[0].course_id, "Incorrect course id retrieved by Enroll"
    assert rep.get_json()["enrollment"]["trainer_id"] == enrollments[0].trainer_id, "Incorrect trainer id retrieved by Enroll"


def test_post_single_enrollment_official(
    client,
    engineer_employee_headers,
    enroll
):
    """Test POST request to create enrollment from HR perspective"""
    enrollment_url = url_for("api.enrollment", eng_id=0, course_id=0, trainer_id=0)

    request_json = {
        'eng_id': enroll.eng_id,
        'course_id': enroll.course_id,
        'trainer_id': enroll.trainer_id,
        'is_official': True,
        'created_timestamp': int(time.time())
    }
    rep = client.post(enrollment_url, json=request_json, headers=engineer_employee_headers)
    assert rep.status_code == 201, "Incorrect status code retrieved"
    rep_json = rep.get_json()
    assert rep_json['enrollment']['eng_id'] == enroll.eng_id, "Incorrect engineer id retrieved"
    assert rep_json['enrollment']['course_id'] == enroll.course_id, "Incorrect course id retrieved"
    assert rep_json['enrollment']['trainer_id'] == enroll.trainer_id, "Incorrect trainer id retrieved"
    assert rep_json['enrollment']['has_passed'] == False, "Incorrect has passed retrieved"
    assert rep_json['enrollment']['is_official'] == True, "Incorrect official status retrieved"

    # Create enrollment failure due to missing attributes
    request_json = {
        'eng_id': enroll.eng_id,
    }
    rep = client.post(enrollment_url, json=request_json, headers=engineer_employee_headers)
    assert rep.status_code == 400, "Incorrect status code retrieved"


def test_post_single_enrollment_self_enroll(
    client,
    engineer_employee_headers,
    enroll
):
    """Test POST request to create enrollment from engineer perspective"""
    enrollment_url = url_for("api.enrollment", eng_id=0, course_id=0, trainer_id=0)

    request_json = {
        'eng_id': enroll.eng_id,
        'course_id': enroll.course_id,
        'trainer_id': enroll.trainer_id,
        'created_timestamp': int(time.time())
    }
    rep = client.post(enrollment_url, json=request_json, headers=engineer_employee_headers)
    assert rep.status_code == 201, "Incorrect status code retrieved"
    rep_json = rep.get_json()
    assert rep_json['enrollment']['eng_id'] == enroll.eng_id, "Incorrect engineer id retrieved"
    assert rep_json['enrollment']['course_id'] == enroll.course_id, "Incorrect course id retrieved"
    assert rep_json['enrollment']['trainer_id'] == enroll.trainer_id, "Incorrect trainer id retrieved"
    assert rep_json['enrollment']['has_passed'] == False, "Incorrect has passed retrieved"
    assert rep_json['enrollment']['is_official'] == False, "Incorrect official status retrieved"


def test_put_single_enrollment(
    client,
    engineer_employee_headers,
    enroll_factory,
    db
):
    """Test PUT request to approve engineer self enrollment from HR perspective"""
    # Creating mock data
    enrollments = enroll_factory.create_batch(1)
    db.session.add_all(enrollments)
    db.session.commit()

    assert enrollments[0].is_official == False, "Incorrect official status being generated by factory"

    # Updating mock data
    enrollment_url = url_for("api.enrollment",
                             eng_id=enrollments[0].eng_id,
                             course_id=enrollments[0].course_id,
                             trainer_id=enrollments[0].trainer_id
                             )

    request_json = {
        'eng_id': enrollments[0].eng_id,
        'course_id': enrollments[0].eng_id,
        'trainer_id': enrollments[0].eng_id,
        'has_passed': False,
        'is_official': True
    }
    rep = client.put(enrollment_url, json=request_json, headers=engineer_employee_headers)
    assert rep.status_code == 201, "Incorrect status code retrieved"
    rep_json = rep.get_json()
    assert rep_json['enrollment']['eng_id'] == enrollments[0].eng_id, "Incorrect engineer id retrieved"
    assert rep_json['enrollment']['course_id'] == enrollments[0].course_id, "Incorrect course id retrieved"
    assert rep_json['enrollment']['trainer_id'] == enrollments[0].trainer_id, "Incorrect trainer id retrieved"
    assert rep_json['enrollment']['has_passed'] == False, "Incorrect has passed retrieved"
    assert rep_json['enrollment']['is_official'] == True, "Incorrect official status retrieved"

# Test Get all enrollments


def test_get_all_enrollments(
    client,
    db,
    enroll_factory,
    engineer_employee_headers
):
    enrollments = enroll_factory.create_batch(3)
    db.session.add_all(enrollments)
    db.session.commit()

    enrollment_url = url_for("api.enrollments", eng_id=enrollments[0].eng_id)
    res = client.get(enrollment_url, headers=engineer_employee_headers)
    assert res.status_code == 200, "Official Enrollment endpoint not up"

    enrollments = [e for e in enrollments if e.eng_id == enrollments[0].eng_id]
    results = res.get_json()
    for enrollment in enrollments:
        assert any(e["eng_id"] == enrollment.eng_id for e in results['results']), "Incorrect engineer enrollment data retreived"
        assert any(e["course_id"] == enrollment.course_id for e in results['results']), "Incorrect course id retrieved for enginer"
        assert any(e["trainer_id"] == enrollment.trainer_id for e in results['results']), "Incorrect course id retrieved for enginer"


# Test Get all self enrollments by eng_id

def test_get_all_self_enrollments_by_eng_id(
    client,
    db,
    enroll_factory,
    admin_headers
):
    enrollments = enroll_factory.create_batch(3)
    db.session.add_all(enrollments)
    db.session.commit()

    # Find unavailable/ empty enrollments
    course_url = url_for('api.self_enrollments_by_eng', eng_id=9999)
    rep = client.get(course_url, headers=admin_headers)
    results = rep.get_json()
    assert rep.status_code == 200, "Enrollment endpoint not up"
    assert len(results['results']) == 0, "Incorrect number of enrollments in course"

    # Get self enrollments of eng
    enrollment_url = url_for("api.self_enrollments_by_eng", eng_id=enrollments[0].eng_id)

    res = client.get(enrollment_url, headers=admin_headers)
    assert res.status_code == 200, "Enrollment endpoint not up"

    enrollments = [e for e in enrollments if e.eng_id == enrollments[0].eng_id]
    results = res.get_json()

    # Check for all enrollments in the list
    for enrollment in enrollments:
        assert any(e["eng_id"] == enrollment.eng_id for e in results['results']), "Incorrect engineer enrollment data retreived"
        assert any(e["course_id"] == enrollment.course_id for e in results['results']), "Incorrect course id retrieved for enginer"
        assert any(e["trainer_id"] == enrollment.trainer_id for e in results['results']), "Incorrect course id retrieved for enginer"
        assert any(e["is_official"] == False for e in results['results']), "Incorrect enrollment status retrieved for enginer"


# Test Get all enrollments by course_id

def test_get_all_enrollments_by_course(
    client,
    db,
    enroll_factory,
    engineer_employee_headers
):
    enrollments = enroll_factory.create_batch(3)
    db.session.add_all(enrollments)
    db.session.commit()

    # Find unavailable/ empty enrollments
    course_url = url_for('api.enrollments_by_course', course_id=9999)
    rep = client.get(course_url, headers=engineer_employee_headers)
    results = rep.get_json()
    assert rep.status_code == 200, "Enrollment endpoint not up"
    assert len(results['results']) == 0, "Incorrect number of enrollments in course"

    # Get enrollments in course
    enrollment_url = url_for("api.enrollments_by_course", course_id=enrollments[0].course_id)

    res = client.get(enrollment_url, headers=engineer_employee_headers)
    assert res.status_code == 200, "Enrollment endpoint not up"

    enrollments = [e for e in enrollments if e.course_id == enrollments[0].course_id]
    results = res.get_json()

    # Check for all enrollments in the list
    for enrollment in enrollments:
        assert any(e["eng_id"] == enrollment.eng_id for e in results['results']), "Incorrect engineer enrollment data retreived"
        assert any(e["course_id"] == enrollment.course_id for e in results['results']), "Incorrect course id retrieved for enginer"
        assert any(e["trainer_id"] == enrollment.trainer_id for e in results['results']), "Incorrect course id retrieved for enginer"
